
#*
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*#
## Imports added here actually do have an impact, but if you add new
## class references to this template, also modify
## BindableFirstPassEvaluator.evaluate(Context, ClassDefinitionNode)
## by adding new addImport() calls.

import starling.events.Event;
import starling.events.EventDispatcher;
import mx.core.IPropertyChangeNotifier;
import feathers.events.PropertyChangeEventData;
import mx.utils.ObjectProxy;
import mx.utils.UIDUtil;

#foreach ($import in $bindableInfo.imports)
import $import;
#end

class BindableProperty
#if ($bindableInfo.needsToImplementIEventDispatcher)
	extends starling.events.EventDispatcher
#end
{
#foreach ($entry in $bindableInfo.accessors.values())
##
##  0. commentary
##
	/*
	 * generated bindable wrapper for property $entry.propertyName ($entry.attributeString)
	 * - generated setter
#if ($entry.isFunction)
	 * - original getter left as-is
	 * - original $entry.attributeString setter '$entry.propertyName' moved to '$entry.backingPropertyName'
#else
	 * - generated getter
	 * - original $entry.attributeString var '$entry.propertyName' moved to '$entry.backingPropertyName'
#end
	 */

##
##  1. maybe generate a namespace declaration
##  NOTE: this comes out once per property, not once per namespace. It appears that we're skating
##  by due to the fact that duplicate namespace declarations don't error at parse time. Should fix.
##
#if ($entry.userNamespace && $entry.userNamespace != "")
	namespace $entry.userNamespace;

#end
##
##  2. generate metadata
##
	[Bindable(event="propertyChange")]
##
##  3. for [Bindable] variables, generate a getter wrapper. ([Bindable] getter/setters use original getter.)
##  Also initialize a velocity variable witnessing this choice for use in setter codegen below.
##
#if ($entry.isFunction)
#set($setterAccessPropertyName = $entry.qualifiedPropertyName)
#else
#set($setterAccessPropertyName = $entry.qualifiedBackingPropertyName)
	$entry.attributeString function get ${entry.propertyName}():$entry.typeName
	{
#if ($entry.isStatic)
		return ${bindableInfo.className}.${entry.qualifiedBackingPropertyName};
#else
		return this.${entry.qualifiedBackingPropertyName};
#end
	}

#end
##
##  4. generate a setter wrapper
##
	$entry.attributeString function set ${entry.propertyName}(value:${entry.typeName}):void
	{
#if ($entry.isStatic)
#set($owner = $bindableInfo.className)
#else
#set($owner = "this")
#end
		var oldValue:Object = ${owner}.$setterAccessPropertyName;
		if (oldValue !== value)
		{
			${owner}.${entry.qualifiedBackingPropertyName} = value;
			var eventData:feathers.events.PropertyChangeEventData = feathers.events.PropertyChangeEventData.fromPool(
				feathers.events.PropertyChangeEventData.KIND_UPDATE, "$entry.qualifiedPropertyName", oldValue, value, ${owner});
#if ($entry.isStatic)
			var eventDispatcher:starling.events.EventDispatcher = ${owner}.staticEventDispatcher;
			if (eventDispatcher != null && eventDispatcher.hasEventListener("propertyChange"))
			{
				eventDispatcher.dispatchEventWith("propertyChange", false, eventData);
			}
#else
			var eventDispatcher:starling.events.EventDispatcher = starling.events.EventDispatcher(${owner});
## The cast to EventDispatcher is necessary, because ASC isn't picking up on the
## fact that we've morphed "this" into an EventDispatcher subclass.
			if (eventDispatcher.hasEventListener("propertyChange"))
			{
				eventDispatcher.dispatchEventWith("propertyChange", false, eventData);
			}
#end
			feathers.events.PropertyChangeEventData.toPool(eventData);
		}
	}

#end

#if ($bindableInfo.needsStaticEventDispatcher)
## We should make sure this doesn't conflict with an already existing
## variable.
	private static var _staticBindingEventDispatcher:starling.events.EventDispatcher =
		new starling.events.EventDispatcher();

	public static function get staticEventDispatcher():EventDispatcher
	{
		return _staticBindingEventDispatcher;
	}
#end
}
